// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * A channel.
 **/
public class Channel implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * Channel ID. This is unique per channel, and the root channel is always id 0.
     **/
    public int id;

    /**
     * Name of the channel. There can not be two channels with the same parent that has the same name.
     **/
    public String name;

    /**
     * ID of parent channel, or -1 if this is the root channel.
     **/
    public int parent;

    /**
     * List of id of linked channels.
     **/
    public int[] links;

    /**
     * Description of channel. Shown as tooltip for this channel.
     **/
    public String description;

    /**
     * Channel is temporary, and will be removed when the last user leaves it.
     **/
    public boolean temporary;

    /**
     * Position of the channel which is used in Client for sorting.
     **/
    public int position;

    public Channel()
    {
    }

    public Channel(int id, String name, int parent, int[] links, String description, boolean temporary, int position)
    {
        this.id = id;
        this.name = name;
        this.parent = parent;
        this.links = links;
        this.description = description;
        this.temporary = temporary;
        this.position = position;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Channel _r = null;
        if(rhs instanceof Channel)
        {
            _r = (Channel)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(parent != _r.parent)
            {
                return false;
            }
            if(!java.util.Arrays.equals(links, _r.links))
            {
                return false;
            }
            if(description != _r.description)
            {
                if(description == null || _r.description == null || !description.equals(_r.description))
                {
                    return false;
                }
            }
            if(temporary != _r.temporary)
            {
                return false;
            }
            if(position != _r.position)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Murmur::Channel");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, parent);
        __h = IceInternal.HashUtil.hashAdd(__h, links);
        __h = IceInternal.HashUtil.hashAdd(__h, description);
        __h = IceInternal.HashUtil.hashAdd(__h, temporary);
        __h = IceInternal.HashUtil.hashAdd(__h, position);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(id);
        __os.writeString(name);
        __os.writeInt(parent);
        IntListHelper.write(__os, links);
        __os.writeString(description);
        __os.writeBool(temporary);
        __os.writeInt(position);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readInt();
        name = __is.readString();
        parent = __is.readInt();
        links = IntListHelper.read(__is);
        description = __is.readString();
        temporary = __is.readBool();
        position = __is.readInt();
    }

    public static final long serialVersionUID = 4822374977479338062L;
}
