// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * A entry in the log.
 **/
public class LogEntry implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * Timestamp in UNIX time_t
     **/
    public int timestamp;

    /**
     * The log message.
     **/
    public String txt;

    public LogEntry()
    {
    }

    public LogEntry(int timestamp, String txt)
    {
        this.timestamp = timestamp;
        this.txt = txt;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LogEntry _r = null;
        if(rhs instanceof LogEntry)
        {
            _r = (LogEntry)rhs;
        }

        if(_r != null)
        {
            if(timestamp != _r.timestamp)
            {
                return false;
            }
            if(txt != _r.txt)
            {
                if(txt == null || _r.txt == null || !txt.equals(_r.txt))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Murmur::LogEntry");
        __h = IceInternal.HashUtil.hashAdd(__h, timestamp);
        __h = IceInternal.HashUtil.hashAdd(__h, txt);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(timestamp);
        __os.writeString(txt);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        timestamp = __is.readInt();
        txt = __is.readString();
    }

    public static final long serialVersionUID = -6040953394063113939L;
}
